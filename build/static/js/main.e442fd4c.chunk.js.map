{"version":3,"sources":["logo.svg","Error.js","Icons.js","InvestorTable.js","Investors.js","CompanyTable.js","Companies.js","Header.js","Dashboard.js","utils.js","CompanyDetailTable.js","Company.js","AddInvestment.js","EditInvestment.js","InvestorDetailTable.js","Investor.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ErrorContainer","styled","div","props","message","tableIcons","Add","forwardRef","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","TableContainer","WrappedRow","icons","columns","title","field","render","rowData","to","id","src","photo_thumbnail","alt","name","investments","data","tableData","options","rowStyle","fontSize","pageSize","GET_INVESTORS","gql","useQuery","loading","error","Error","investor","length","map","company","join","InvestorTable","RowItem","Link","investors","GET_COMPANIES","console","log","CompanyTable","Header","header","logo","Tabs","ul","View","li","isSelected","HorizontalRule","hr","MenuItem","useState","selectedTab","setSelectedTab","tabs","tab","i","key","onClick","link","formatCurrency","currency","Intl","NumberFormat","style","format","colData","amount","search","actionsColumnIndex","toolbarButtonAlignment","actions","icon","tooltip","event","isFreeAction","ViewContainer","BackButton","GET_COMPANY","useParams","variables","company_by_pk","investment","CompanyDetailTable","setCompany","setInvestment","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","label","type","fullWidth","onChange","e","target","value","DialogActions","Button","color","onSubmit","variant","useEffect","disabled","hidden","ADD_INVESTMENT","EDIT_INVESTMENT","DELETE_INVESTMENT","isAddInvestmentOpen","setIsAddInvestmentOpen","isEditInvestmentOpen","setIsEditInvestmentOpen","newInvestment","setNewInvestment","updatedInvestment","setUpdatedInvestment","useMutation","refetchQueries","query","GET_INVESTOR","addInvestment","editInvestment","deleteInvestment","handleAddInvestmentClose","useCallback","handleEditInvestmentClose","handleAddInvestmentSubmit","handleEditInvestmentSubmit","AddInvestment","EditInvestment","investor_by_pk","InvestorDetailTable","App","className","path","Dashboard","Investors","Companies","Investor","Company","Boolean","window","location","hostname","match","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e442fd4c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ced5a95e.svg\";","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ErrorContainer = styled.div`\r\ncolor: red;\r\nbackground: #F9E8E8;\r\n`;\r\n\r\nexport default (props) => {\r\n    return <ErrorContainer>\r\n        <pre>\r\n            {props.message}\r\n        </pre>\r\n    </ErrorContainer>\r\n}\r\n","import React, { forwardRef } from 'react';\r\n\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\n\r\nexport const tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n","import React, { } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport styled from \"styled-components\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport { tableIcons } from \"./Icons\";\r\n\r\nconst TableContainer = styled.div`\r\nmax-width: 100%\r\n`;\r\nconst WrappedRow = styled.div`\r\nword-break: break-all;\r\n`\r\n\r\nexport default (props) => {\r\n    return (\r\n        <TableContainer>\r\n            <MaterialTable\r\n                icons={tableIcons}\r\n                columns={[\r\n                    {\r\n                        title: \"Name\", field: \"name\", render: rowData => <Link to={`/investor/${rowData.id}`}>\r\n                            <img src={rowData.photo_thumbnail} alt={rowData.name}/>\r\n                            {rowData.name}\r\n                        </Link>\r\n                    },\r\n                    {\r\n                        title: \"Investments\", field: \"investments\", render: rowData =>\r\n                            <WrappedRow>\r\n                                {rowData.investments}\r\n                            </WrappedRow>\r\n                    },\r\n                ]}\r\n                data={props.tableData}\r\n                options={{\r\n                    rowStyle: {\r\n                        fontSize: '12px',\r\n                    },\r\n                    pageSize: 10\r\n                }}\r\n                title=\"Investors\"\r\n            />\r\n        </TableContainer>\r\n    );\r\n}","import React from 'react'\r\nimport { useQuery, gql } from '@apollo/client';\r\n\r\nimport Error from \"./Error\";\r\nimport InvestorTable from \"./InvestorTable\";\r\n\r\n// Example of a component that uses apollo-client to fetch data.\r\n\r\nconst GET_INVESTORS = gql`\r\n  query GetInvestors {\r\n    investor(limit: 100) {\r\n      id\r\n      name\r\n      photo_thumbnail\r\n      investments{\r\n        company{\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default () => {\r\n\r\n  const { loading, error, data } = useQuery(GET_INVESTORS);\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if(error) return <Error message={error.message}/>\r\n  if (data.investor.length === 0) return <p>The database is empty!</p>\r\n  const tableData = data.investor.map(({ id, name, photo_thumbnail, investments }) => {\r\n    return {\r\n      id,\r\n      name,\r\n      photo_thumbnail,\r\n      investments: investments.map(({ company }) => company.name).join(\", \")\r\n    };\r\n  });\r\n\r\n  return <>\r\n    <InvestorTable tableData={tableData} />\r\n  </>\r\n}","import React, { } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport styled from \"styled-components\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport { tableIcons } from \"./Icons\";\r\n\r\nconst TableContainer = styled.div`\r\nmax-width: 100%\r\n`;\r\nconst WrappedRow = styled.div`\r\nword-break: break-all;\r\n`\r\nconst RowItem = styled(Link)`\r\ntext-decoration: none;\r\n&:focus, &:hover, &:visited, &:link, &:active {\r\ntext-decoration: none;\r\n}\r\n`\r\n\r\nexport default (props) => {\r\n    return (\r\n        <TableContainer>\r\n            <MaterialTable\r\n                icons={tableIcons}\r\n                columns={[\r\n                    {\r\n                        title: \"Name\", field: \"name\", render: rowData =>\r\n                        <RowItem to={`company/${rowData.id}`}>{rowData.name}</RowItem>\r\n                    },\r\n                    {\r\n                        title: \"Investors\", field: \"investors\", render: rowData =>\r\n                            <WrappedRow>\r\n                                {rowData.investors}\r\n                            </WrappedRow>\r\n                    },\r\n                ]}\r\n                data={props.tableData}\r\n                options={{\r\n                    rowStyle: {\r\n                        fontSize: '12px',\r\n                    },\r\n                    pageSize: 10\r\n                }}\r\n                title=\"Companies\">\r\n            </MaterialTable>\r\n        </TableContainer>\r\n    );\r\n}","import React from 'react'\r\nimport { useQuery, gql } from '@apollo/client';\r\n\r\nimport Error from \"./Error\";\r\nimport CompanyTable from \"./CompanyTable\";\r\n\r\n\r\nconst GET_COMPANIES = gql`\r\n    query Get_Companies {\r\n        company(limit: 100) {\r\n            id\r\n            name\r\n            investments {\r\n                investor {\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }`;\r\n\r\nexport default () => {\r\n    const {data, loading, error} = useQuery(GET_COMPANIES);\r\n    if (loading) return <p>Loading...</p>;\r\n    if(error) return <Error message={error.message}/>\r\n    console.log(data.company);\r\n    const tableData = data.company.map(({id, name, investments}) => {\r\n        return {\r\n            id,\r\n            name,\r\n            investors: investments.map(({investor}) => investor.name).join(\", \")\r\n        };\r\n    });\r\n    return (\r\n        <CompanyTable tableData={tableData}/>\r\n    );\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport logo from \"./logo.svg\";\r\n\r\nexport default () => {\r\n    const Header = styled.header`\r\n        text-align: left;\r\n        padding: 20px 0px 20px 20px;\r\n    `\r\n    return (\r\n        <Header>\r\n           <img src={logo} alt={\"InvestorBook\"}/>\r\n        </Header>\r\n    )\r\n}","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Tabs = styled.ul`\r\n        margin:0 0 0 10px;\r\n        padding: 0;\r\n        text-align: left;\r\n        list-style-type: none;\r\n    `;\r\nconst View = styled.li`\r\n        margin:0 10px 0 10px;\r\n        padding-bottom: 4px;\r\n        display: inline;\r\n        cursor: pointer;\r\n        border-bottom: ${props => props.isSelected ? \"solid 5px #3C3939\" : \"none\"};\r\n    `;\r\nconst HorizontalRule = styled.hr`\r\n        margin-bottom: 2px;\r\n    `;\r\nconst MenuItem = styled(Link)`\r\n    text-decoration: none;\r\n    font-weight: bold;\r\n    color: ${props => props.isSelected ? \"black\" : \"#adadad\"};\r\n    &:focus, &:hover, &:visited, &:link, &:active {\r\n        text-decoration: none;\r\n    }\r\n`\r\nexport default (props) => {\r\n    const [selectedTab, setSelectedTab] = useState(0);\r\n    return (\r\n        <>\r\n            <Tabs>\r\n                {props.tabs.map((tab, i) =>\r\n                    <View\r\n                        isSelected={i === selectedTab}\r\n                        key={tab.name}\r\n                        onClick={() => setSelectedTab(i)}>\r\n                        <MenuItem\r\n                            to={tab.link}\r\n                            isSelected={i === selectedTab}>\r\n                            {tab.name}\r\n                        </MenuItem>\r\n                    </View>)\r\n                }\r\n            </Tabs>\r\n            <HorizontalRule />\r\n            {props.render()}\r\n        </>\r\n    );\r\n}\r\n","export const formatCurrency = (currency) => {\r\n    const formatter = new Intl.NumberFormat('en-US', {\r\n        style: 'currency',\r\n        currency: 'USD'\r\n    });\r\n    return formatter.format(currency);\r\n}","import React, {useState} from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport Delete from '@material-ui/icons/Delete';\r\nimport AddBox from '@material-ui/icons/AddBox';\r\n\r\nimport { formatCurrency } from \"./utils\";\r\nimport { tableIcons } from \"./Icons\";\r\n\r\nconst colData = [\r\n    {\r\n        title: \"Name\", field: \"investor\"\r\n    },\r\n    {\r\n        title: \"Amount\", field: \"amount\", render: rowData => <div>{formatCurrency(rowData.amount)}</div>\r\n    }\r\n];\r\n\r\nexport default (props) => {\r\n    return (\r\n        <>\r\n            <MaterialTable\r\n                icons={tableIcons}\r\n                columns={colData}\r\n                data={props.tableData}\r\n                options={{\r\n                    rowStyle: {\r\n                        fontSize: '12px',\r\n                    },\r\n                    pageSize: 10,\r\n                    search: false,\r\n                    actionsColumnIndex: -1,\r\n                    toolbarButtonAlignment: \"left\"\r\n                }}\r\n                actions={[\r\n                    {\r\n                        icon: () => <Edit />,\r\n                        tooltip: 'Edit',\r\n                        onClick: (event, rowData) => console.log(rowData.name)\r\n                    },\r\n                    {\r\n                        icon: () => <Delete />,\r\n                        tooltip: 'Delete',\r\n                        onClick: (event, rowData) =>  console.log(rowData.name)\r\n                    },\r\n                    {\r\n                        icon: () => <AddBox />,\r\n                        tooltip: 'Add Investment',\r\n                        isFreeAction: true,\r\n                        onClick: (event) =>  console.log(event)\r\n                    }\r\n                ]}\r\n                title=\"Investors\">\r\n            </MaterialTable>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { gql, useQuery } from \"@apollo/client\";\r\nimport styled from \"styled-components\";\r\nimport ArrowBackIos from '@material-ui/icons/ArrowBackIos';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport CompanyDetailTable from \"./CompanyDetailTable\";\r\nimport Error from \"./Error\";\r\n\r\nconst ViewContainer = styled.div`\r\n    display: flex;\r\n`;\r\nconst TableContainer = styled.div`\r\n    width: 100%;\r\n`;\r\nconst BackButton = styled(Link)`\r\n    padding: 0 10px 0 10px;\r\n`;\r\nconst GET_COMPANY = gql`\r\n    query Get_Company_By_Pk($id: Int!) {\r\n        company_by_pk(id: $id) {   \r\n            investments {\r\n                amount\r\n                investor {\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\nexport default () => {\r\n    const { id } = useParams();\r\n    const { data, loading, error } = useQuery(GET_COMPANY, {\r\n        variables: {\r\n            id\r\n        }\r\n    });\r\n    if (error) return <Error />\r\n    if (loading) return <p>Loading...</p>;\r\n    const tableData = data.company_by_pk.investments.map(investment => {\r\n        return {\r\n            investor: investment.investor.name,\r\n            amount: investment.amount\r\n        }\r\n    });\r\n    return (\r\n        <ViewContainer>\r\n            <BackButton to=\"/companies\"><ArrowBackIos /></BackButton>\r\n            <TableContainer>\r\n                <CompanyDetailTable tableData={tableData} />\r\n            </TableContainer>\r\n        </ViewContainer>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nexport default (props) => {\r\n    const [ company, setCompany ] = useState(null);\r\n    const [ investment, setInvestment ] = useState(0);\r\n    return (\r\n        <div>\r\n            <Dialog open={props.open} onClose={props.onClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Add Investment</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Please enter the details of the investment.\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        label=\"Select Company\"\r\n                        type=\"text\"\r\n                        fullWidth\r\n                        onChange={(e) => setCompany(e.target.value)}\r\n                    />\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        label=\"Investment Amount\"\r\n                        type=\"number\"\r\n                        fullWidth\r\n                        onChange={(e) => setInvestment(e.target.value)}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={props.onClose} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => props.onSubmit({company, investment})} variant=\"contained\" color=\"primary\">\r\n                        Add Company\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n\r\n}","import React, { useEffect, useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nexport default (props) => {\r\n    const [company, setCompany] = useState(\"\");\r\n    const [investment, setInvestment] = useState(0);\r\n    const { name, amount } = props.investment || {};\r\n\r\n    useEffect(() => {\r\n        if (name !== company) {\r\n            setCompany(name);\r\n        }\r\n        if (investment !== amount) {\r\n            setInvestment(amount);\r\n        }\r\n    }, [name,company, investment, amount]);\r\n\r\n    return (\r\n        <div>\r\n            <Dialog open={props.open} onClose={props.onClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Edit Investment</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Please enter the details of the investment.\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        label=\"Select Company\"\r\n                        type=\"text\"\r\n                        fullWidth\r\n                        value={company}\r\n                        disabled\r\n                    />\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        label=\"Investment Amount\"\r\n                        type=\"number\"\r\n                        fullWidth\r\n                        value={investment}\r\n                        onChange={(e) => setInvestment(e.target.value)}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={props.onClose} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => props.onSubmit({ id: props.investment.id, name: company, amount: investment })} variant=\"contained\" color=\"primary\">\r\n                        Save Company\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n\r\n}","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport Delete from '@material-ui/icons/Delete';\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport { useMutation, gql } from '@apollo/client';\r\nimport { tableIcons } from \"./Icons\";\r\n\r\nimport { formatCurrency } from \"./utils\";\r\nimport AddInvestment from \"./AddInvestment\";\r\nimport { GET_INVESTOR } from \"./Investor\";\r\nimport EditInvestment from \"./EditInvestment\";\r\n\r\nconst colData = [\r\n    {\r\n        title: \"Id\", field: \"id\", hidden: true\r\n    },\r\n    {\r\n        title: \"Name\", field: \"name\",\r\n    },\r\n    {\r\n        title: \"Amount\", field: \"amount\", render: rowData => <div>{formatCurrency(rowData.amount)}</div>\r\n    }\r\n];\r\n\r\nconst ADD_INVESTMENT = gql`\r\n    mutation Add_Investment($amount: numeric!, $name: String!, $investor: Int!) {\r\n    insert_investment(objects: {amount: $amount, company: {data: {name: $name}}, investor_id: $investor}) {\r\n        returning {\r\n        amount\r\n            company {\r\n                name\r\n            }\r\n        }\r\n    }\r\n    }\r\n`;\r\n\r\nconst EDIT_INVESTMENT = gql`\r\n    mutation Edit_Investment($id: Int!, $amount: numeric!) {\r\n        update_investment_by_pk(pk_columns: {id: $id}, _set: {amount: $amount}){\r\n            amount\r\n        }\r\n    }\r\n`;\r\n\r\nconst DELETE_INVESTMENT = gql`\r\n    mutation Delete_Investment_By_Pk($id: Int!) {\r\n        delete_investment_by_pk(id: $id){\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nexport default (props) => {\r\n    const [isAddInvestmentOpen, setIsAddInvestmentOpen] = useState(false);\r\n    const [isEditInvestmentOpen, setIsEditInvestmentOpen] = useState(false);\r\n\r\n    const [newInvestment, setNewInvestment] = useState(null);\r\n    const [updatedInvestment, setUpdatedInvestment] = useState(null);\r\n\r\n    const [addInvestment] = useMutation(ADD_INVESTMENT, {\r\n        refetchQueries: [\r\n            { query: GET_INVESTOR, variables: { id: props.investor } }\r\n        ]\r\n    });\r\n\r\n    const [editInvestment] = useMutation(EDIT_INVESTMENT, {\r\n        refetchQueries: [\r\n            { query: GET_INVESTOR, variables: { id: props.investor } }\r\n        ]\r\n    });\r\n\r\n    const [deleteInvestment] = useMutation(DELETE_INVESTMENT, {\r\n        refetchQueries: [\r\n            { query: GET_INVESTOR, variables: { id: props.investor } }\r\n        ]\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (newInvestment) {\r\n            addInvestment({\r\n                variables: {\r\n                    investor: props.investor,\r\n                    name: newInvestment.company,\r\n                    amount: newInvestment.investment\r\n                }\r\n            });\r\n        }\r\n    }, [newInvestment, addInvestment]);\r\n\r\n    useEffect(() => {\r\n        if(updatedInvestment){\r\n            editInvestment({\r\n                variables:{\r\n                    id: updatedInvestment.id,\r\n                    amount: updatedInvestment.amount\r\n                }\r\n            });\r\n        }\r\n    }, [updatedInvestment, editInvestment]);\r\n\r\n    const handleAddInvestmentClose = useCallback(() => {\r\n        setIsAddInvestmentOpen(false);\r\n    }, [setIsAddInvestmentOpen]);\r\n    const handleEditInvestmentClose = useCallback(() => {\r\n        setIsEditInvestmentOpen(false);\r\n    }, [setIsEditInvestmentOpen]);\r\n    const handleAddInvestmentSubmit = useCallback((investment) => {\r\n        setIsAddInvestmentOpen(false);\r\n        setNewInvestment(investment);\r\n    }, [setIsAddInvestmentOpen, setNewInvestment]);\r\n    const handleEditInvestmentSubmit = useCallback((investment) => {\r\n        setIsEditInvestmentOpen(false);\r\n        setUpdatedInvestment(investment);\r\n    }, [setIsEditInvestmentOpen, setUpdatedInvestment]);\r\n    return (\r\n        <>\r\n            <MaterialTable\r\n                icons={tableIcons}\r\n                columns={colData}\r\n                data={props.tableData}\r\n                options={{\r\n                    rowStyle: {\r\n                        fontSize: '12px',\r\n                    },\r\n                    pageSize: 10,\r\n                    search: false,\r\n                    actionsColumnIndex: -1,\r\n                    toolbarButtonAlignment: \"left\"\r\n                }}\r\n                actions={[\r\n                    {\r\n                        icon: () => <Edit />,\r\n                        tooltip: 'Edit',\r\n                        onClick: (event, rowData) => {\r\n                            setIsEditInvestmentOpen(true);\r\n                            console.log( rowData.id)\r\n                            setUpdatedInvestment({\r\n                                id: rowData.id,\r\n                                name: rowData.name,\r\n                                amount: rowData.amount,\r\n                            });\r\n                        }\r\n                    },\r\n                    {\r\n                        icon: () => <Delete />,\r\n                        tooltip: 'Delete',\r\n                        onClick: (event, rowData) => deleteInvestment({ variables: { id: rowData.id } })\r\n                    },\r\n                    {\r\n                        icon: () => <AddBox />,\r\n                        tooltip: 'Add Investment',\r\n                        isFreeAction: true,\r\n                        onClick: (event) => setIsAddInvestmentOpen(true)\r\n                    }\r\n                ]}\r\n                title=\"Investments\">\r\n            </MaterialTable>\r\n            <AddInvestment\r\n                open={isAddInvestmentOpen}\r\n                onClose={handleAddInvestmentClose}\r\n                onSubmit={handleAddInvestmentSubmit} />\r\n            <EditInvestment\r\n                open={isEditInvestmentOpen}\r\n                investment={updatedInvestment}\r\n                onClose={handleEditInvestmentClose}\r\n                onSubmit={handleEditInvestmentSubmit} />\r\n        </>\r\n    )\r\n\r\n}","import React from \"react\";\r\nimport { gql, useQuery } from \"@apollo/client\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport ArrowBackIos from '@material-ui/icons/ArrowBackIos';\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nimport InvestorDetailTable from \"./InvestorDetailTable\";\r\nimport Error from \"./Error\";\r\n\r\nconst ViewContainer = styled.div`\r\n    display: flex;\r\n`;\r\nconst TableContainer = styled.div`\r\n    width: 100%;\r\n`;\r\nconst BackButton = styled(Link)`\r\n    padding: 0 10px 0 10px;\r\n`;\r\n\r\nexport const GET_INVESTOR = gql`\r\n    query Get_Companies($id: Int!) {\r\n        investor_by_pk(id: $id) {\r\n            investments {\r\n                id\r\n                amount\r\n                company {\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport default (props) => {\r\n    const { id } = useParams();\r\n    const { data, loading, error } = useQuery(GET_INVESTOR, {\r\n        variables: {\r\n            id\r\n        }\r\n    });\r\n    if (error) return <Error />\r\n    if (loading) return <p>Loading...</p>;\r\n    const tableData = data.investor_by_pk.investments.map(investment => {\r\n        return {\r\n            id: investment.id,\r\n            amount: investment.amount,\r\n            name: investment.company.name\r\n        }\r\n    });\r\n    return (\r\n        <ViewContainer>\r\n            <BackButton to=\"/investments\"><ArrowBackIos /></BackButton>\r\n            <TableContainer>\r\n                <InvestorDetailTable investor={id} tableData={tableData} />\r\n            </TableContainer>\r\n        </ViewContainer>);\r\n}","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\n\r\nimport './App.css';\r\nimport Investors from './Investors';\r\nimport Companies from \"./Companies\";\r\nimport Header from \"./Header\";\r\nimport Dashboard from \"./Dashboard\";\r\nimport Company from './Company';\r\nimport Investor from './Investor';\r\n\r\n\r\nfunction App() {\r\n  const tabs = [{ name: \"Investors\", link: \"/investors\" }, { name: \"Companies\", link: \"/companies\" }];\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/investors\">\r\n            <Dashboard tabs={tabs} render={() => <Investors />} />\r\n          </Route>\r\n          <Route path=\"/companies\">\r\n            <Dashboard tabs={tabs} render={() => <Companies />} />\r\n          </Route>\r\n          <Route path=\"/investor/:id\">\r\n            <Investor />\r\n          </Route>\r\n          <Route path=\"/company/:id\">\r\n            <Company />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Dashboard tabs={tabs} render={() => <Investors />} />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"https://electric-kangaroo-87.hasura.app/v1/graphql\",\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ApolloProvider client={client}>\r\n      <App />\r\n    </ApolloProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}